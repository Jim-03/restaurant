import { getFoodDetails, notify } from './util.js';
import { getDateRange } from './admin.js';

/**
 * Retrieves the general report of the entire system's data
 * @returns {Promise<null|{totalSales: string, avgValue: string, topSellingItem: string, ordersProcessed: *, lowStockItems: number, mostUsedItem: string, stockValue: string, totalItems: number}>} An object containing the general system's data
 */
export async function getReport () {
  try {
    const totalSales = await getTotalSales();
    const orderCount = await getNumberOfCompleteOrders();
    const topSellingItem = await getTopSellingItem();
    return {
      totalSales,
      avgValue: (totalSales / orderCount).toFixed(2),
      topSellingItem,
      ordersProcessed: await getNumberOfCompleteOrders(),
      lowStockItems: await getLowStockItems(),
      mostUsedItem: topSellingItem,
      stockValue: await getStockValue(),
      totalItems: await getTotalItemsSold()
    };
  } catch (error) {
    console.error('Error fetching order data:', error);
    return null;
  }
}

/**
 * Retrieves the total price of items stored
 * @returns {Promise<number>} The total price
 */
async function getStockValue () {
  try {
    let value = 0;
    const response = await fetch('/api/food');
    const data = await response.json();

    // Check if the response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return 0;
    }

    // Iterate through each food item and add it to the total value
    data.list.forEach((item) => {
      value += item.price;
    });

    return value;
  } catch (error) {
    console.error(error);
    return 0;
  }
}

/**
 * Retrieves the total amount of money generated by sales
 * @returns {Promise<number|string>} The total number
 */
async function getTotalSales () {
  try {
    // Fetch the list of sales
    const response = await fetch('/api/order/date', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(getDateRange())
    });

    const data = await response.json();

    // Check if the response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return 0.0;
    }

    // Extract a list of complete orders
    const completeOrders = data.list.filter(
      (order) => order.orderStatus === 'completed'
    );

    let value = 0;
    // Iterate through each order and add the cost to the total value
    completeOrders.forEach((order) => {
      value += order.totalPrice;
    });

    return value.toFixed(2);
  } catch (error) {
    console.error(error);
    return 0.0;
  }
}

/**
 * Retrieves the number of items having a quantity below 5
 * @returns {Promise<number>} The number of items
 */
async function getLowStockItems () {
  try {
    // Fetch a list of all food items
    const response = await fetch('/api/food');
    const data = await response.json();
    // Check if the response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return 0;
    }

    // Extract a list of items having a quantity less than 5
    const lowStockItems = data.list.filter((item) => item.stock < 5);
    // Return the number of items with low quantity
    return lowStockItems.length;
  } catch (error) {
    console.error(error);
    return 0;
  }
}

/**
 * Retrieves a number of orders whose status is 'completed'
 * @returns {Promise<number>}
 */
async function getNumberOfCompleteOrders () {
  try {
    // Fetch the list of complete orders
    const response = await fetch('/api/order/date', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(getDateRange())
    });

    const data = await response.json();

    // Check if response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return 0;
    }

    // Extract the list of complete orders
    const completeOrders = data.list.filter(
      (order) => order.orderStatus === 'completed'
    );

    return completeOrders.length;
  } catch (error) {
    console.error(error);
    return 0;
  }
}

/**
 * Retrieves the name of the top most sold item
 * @returns {Promise<string>}
 */
async function getTopSellingItem () {
  try {
    // Fetch the list of complete orders
    const response = await fetch('/api/order/date', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(getDateRange())
    });

    const data = await response.json();

    // Check if response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return null;
    }

    // Extract completed orders
    const completeOrders = data.list.filter(
      (order) => order.orderStatus === 'completed'
    );

    const foodCount = {};

    // Fetch ordered food items for each order
    for (const order of completeOrders) {
      const response = await fetch(`/api/orderFood/${order.id}`);
      const orderData = await response.json();

      if (orderData.status !== 'success') {
        notify(orderData.status, orderData.message);
        continue;
      }

      // Count occurrences of each food item
      for (const item of orderData.list) {
        foodCount[item.foodItem] = (foodCount[item.foodItem] || 0) + 1;
      }
    }

    // Determine the most frequently ordered foodId (mode)
    let topFoodId = null;
    let maxCount = 0;
    for (const [foodId, count] of Object.entries(foodCount)) {
      if (count > maxCount) {
        topFoodId = foodId;
        maxCount = count;
      }
    }

    // Fetch the top food id details
    const details = await getFoodDetails(topFoodId);

    // Return the name of the food item
    return details.name;
  } catch (error) {
    console.error(error);
    return null;
  }
}

/**
 * Retrieves a number of items sold
 * @returns {Promise<number>}
 */
async function getTotalItemsSold () {
  try {
    // Fetch the list of complete orders
    const response = await fetch('/api/order/date', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(getDateRange())
    });

    const data = await response.json();

    // Check if response was okay
    if (data.status !== 'success') {
      notify(data.status, data.message);
      return 0;
    }

    // Extract completed orders
    const completeOrders = data.list.filter(
      (order) => order.orderStatus === 'completed'
    );

    const foodCount = {};

    // Fetch ordered food items for each order
    for (const order of completeOrders) {
      const response = await fetch(`/api/orderFood/${order.id}`);
      const orderData = await response.json();

      if (orderData.status !== 'success') {
        notify(orderData.status, orderData.message);
        continue;
      }

      // Count occurrences of each food item
      for (const item of orderData.list) {
        foodCount[item.foodItem] = (foodCount[item.foodItem] || 0) + 1;
      }
    }

    return Object.keys(foodCount).length;
  } catch (error) {
    console.error(error);
    return 0;
  }
}
